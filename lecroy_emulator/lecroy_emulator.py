from numpy import *
import time

header = """WAVEDESC\x00\x00\x00\x00\x00\x00\x00\x00LECROY_2_3\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00Z\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\xd0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00LECROYWR44Xi\x00\x00\x00\x00P7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\xd0\x03\x00\x92\xd0\x03\x00\x90\xd0\x03\x00\x00\x00\x00\x00\x91\xd0\x03\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x08\xb5\xd1:o\x12C\xbe\x00\x00\xf8B\x00\x00\xfa\xc2\x08\x00\x01\x00\xff\xe6[/O\xd3%\xca\x16\x1c\xfa\xbe}\x86\x81\xf8\n\x1c\xfa\xbeV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\xbc\x8c+lk\xccj\x08\xaf(@*\x13\x11\x06\xdb\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x14\x00\x02\x00\x00\x00\x80?\x0e\x00\x00\x00\x00\x00\x80?o\x12C\xbe\x00\x00"""

def create_data(npoints = 2048):
    phase = time.time()
    x = linspace(0,3*pi,npoints)
    y = 100*( sin(x + phase) + 0.1*random.rand(npoints))
    y = y.astype(int8)
    data = y.tostring()
    length = array([len(data)], dtype=uint32)
    out = header[:60] + length.tostring() + header[64:] + data
    return '#9{0:09d}{1}'.format(len(out),out)

def emulate(query):
    if query=="*IDN?":
        return "Lecroy Oscilloscope Emulator.\n"
    if query.startswith("C1:WF?") or query.startswith("C1:WAVEFORM?"):
        return create_data()
    if query.startswith("C2:WF?") or query.startswith("C2:WAVEFORM?"):
        return create_data()
    return 'Unknown request.\n'
